// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package datagen

import (
	"strconv"
    "testing"
    "unsafe"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
    "google.golang.org/protobuf/proto"
    gootlpcollectorlogs "go.opentelemetry.io/proto/slim/otlp/collector/logs/v1"
    gootlpcollectormetrics "go.opentelemetry.io/proto/slim/otlp/collector/metrics/v1"
    gootlpcollectorprofiles "go.opentelemetry.io/proto/slim/otlp/collector/profiles/v1development"
    gootlpcollectortrace "go.opentelemetry.io/proto/slim/otlp/collector/trace/v1"
    gootlpcommon "go.opentelemetry.io/proto/slim/otlp/common/v1"
    gootlplogs "go.opentelemetry.io/proto/slim/otlp/logs/v1"
    gootlpmetrics "go.opentelemetry.io/proto/slim/otlp/metrics/v1"
    gootlpprofiles "go.opentelemetry.io/proto/slim/otlp/profiles/v1development"
    gootlpresource "go.opentelemetry.io/proto/slim/otlp/resource/v1"
    gootlptrace "go.opentelemetry.io/proto/slim/otlp/trace/v1"


    "go.opentelemetry.io/collector/pdata/internal/data"
    "go.opentelemetry.io/collector/pdata/internal/json"
    otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
    otlpcollectormetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1"
    otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
    otlpcollectortrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1"
    otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
    otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
    otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
    otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
    otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
    otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

func TestMarshalAndUnmarshalJSONProfilesDictionaryUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewProfilesDictionary()
	UnmarshalJSONProfilesDictionary(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewProfilesDictionary(), dest)
}

func TestMarshalAndUnmarshalJSONProfilesDictionary(t *testing.T) {
	for i, src := range generateTestValuesProfilesDictionary() {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONProfilesDictionary(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewProfilesDictionary()
			UnmarshalJSONProfilesDictionary(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoProfilesDictionaryUnknown(t *testing.T) {
	dest := NewProfilesDictionary()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoProfilesDictionary(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewProfilesDictionary(), dest)
}

func TestMarshalAndUnmarshalProtoProfilesDictionary(t *testing.T) {
	for i, src := range generateTestValuesProfilesDictionary(){
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoProfilesDictionary(src))
			gotSize := MarshalProtoSizedProfilesDictionary(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewProfilesDictionary()
			require.NoError(t, UnmarshalProtoProfilesDictionary(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufProfilesDictionary(t *testing.T) {
	for i, src := range generateTestValuesProfilesDictionary(){
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoProfilesDictionary(src))
			gotSize := MarshalProtoSizedProfilesDictionary(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &go<no value>{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewProfilesDictionary()
			require.NoError(t, UnmarshalProtoProfilesDictionary(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func generateTestValuesProfilesDictionary() []*ProfilesDictionary {
    return []*<no value>{
		{},
    }
}