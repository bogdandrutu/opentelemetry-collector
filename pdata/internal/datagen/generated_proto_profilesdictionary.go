// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package datagen

import (
    "encoding/binary"
    "fmt"
    "iter"
    "math"
    "sort"
    "sync"

    "go.opentelemetry.io/collector/pdata/internal/json"
    "go.opentelemetry.io/collector/pdata/internal/proto"
    otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
    otlpcollectormetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1"
    otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
    otlpcollectortrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1"
    otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
    otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
    otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
    otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
    otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
    otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
)

type ProfilesDictionary = <no value>

func NewProfilesDictionary() *ProfilesDictionary {
    return &ProfilesDictionary{}
}

// MarshalJSONOrig marshals all properties from the current struct to the destination stream.
func MarshalJSONProfilesDictionary(orig *ProfilesDictionary, dest *json.Stream) {
    dest.WriteObjectStart()
    dest.WriteObjectEnd()
}

func SizeProtoProfilesDictionary(orig *ProfilesDictionary) int {
    var n int
    var l int
    _ = l
    return n
}

func MarshalProtoSizedProfilesDictionary(orig *ProfilesDictionary, buf []byte) int {
    pos := len(buf)
    var l int
    _ = l
    return len(buf) - pos
}

func UnmarshalProtoProfilesDictionary(orig *ProfilesDictionary, buf []byte) error {
    var err error
    var fieldNum int32
    var wireType proto.WireType

    l := len(buf)
    pos := 0
    for pos < l {
        // If in a group parsing, move to the next tag.
        fieldNum, wireType, pos, err = proto.ConsumeTag(buf, pos)
        if err != nil {
            return err
        }
        switch fieldNum {
        default:
            pos, err = proto.ConsumeUnknown(buf, pos, wireType)
            if err != nil {
                return err
            }
        }
    }
    return nil
}
