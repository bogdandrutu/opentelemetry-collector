// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectortrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigSpan_Link() otlptrace.Span_Link {
	return otlptrace.Span_Link{}
}

func NewOrigPtrSpan_Link() *otlptrace.Span_Link {
	return &otlptrace.Span_Link{}
}

func CopyOrigSpan_Link(dest, src *otlptrace.Span_Link) {
	dest.TraceId = src.TraceId
	dest.SpanId = src.SpanId
	CopyOrigTraceState(&dest.TraceState, &src.TraceState)
	dest.Attributes = CopyOrigKeyValueSlice(dest.Attributes, src.Attributes)
	dest.DroppedAttributesCount = src.DroppedAttributesCount
	dest.Flags = src.Flags
}

func FillOrigTestSpan_Link(orig *otlptrace.Span_Link) {
	orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	FillOrigTestTraceState(&orig.TraceState)
	orig.Attributes = GenerateOrigTestKeyValueSlice()
	orig.DroppedAttributesCount = uint32(13)
	orig.Flags = uint32(13)
}

// UnmarshalJSONOrigSpanLink unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigSpan_Link(orig *otlptrace.Span_Link, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "traceId", "trace_id":
			orig.TraceId.UnmarshalJSONIter(iter)
		case "spanId", "span_id":
			orig.SpanId.UnmarshalJSONIter(iter)
		case "traceState", "trace_state":
			UnmarshalJSONOrigTraceState(&orig.TraceState, iter)
		case "attributes":
			orig.Attributes = UnmarshalJSONOrigKeyValueSlice(iter)
		case "droppedAttributesCount", "dropped_attributes_count":
			orig.DroppedAttributesCount = iter.ReadUint32()
		case "flags":
			orig.Flags = iter.ReadUint32()
		default:
			iter.Skip()
		}
		return true
	})
}
