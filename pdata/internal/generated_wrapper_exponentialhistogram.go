// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectormetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigExponentialHistogram() otlpmetrics.ExponentialHistogram {
	return otlpmetrics.ExponentialHistogram{}
}

func NewOrigPtrExponentialHistogram() *otlpmetrics.ExponentialHistogram {
	return &otlpmetrics.ExponentialHistogram{}
}

func CopyOrigExponentialHistogram(dest, src *otlpmetrics.ExponentialHistogram) {
	dest.DataPoints = CopyOrigExponentialHistogramDataPointSlice(dest.DataPoints, src.DataPoints)
	dest.AggregationTemporality = src.AggregationTemporality
}

func FillOrigTestExponentialHistogram(orig *otlpmetrics.ExponentialHistogram) {
	orig.DataPoints = GenerateOrigTestExponentialHistogramDataPointSlice()
	orig.AggregationTemporality = otlpmetrics.AggregationTemporality(1)
}

// UnmarshalJSONOrigExponentialHistogram unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigExponentialHistogram(orig *otlpmetrics.ExponentialHistogram, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "dataPoints", "data_points":
			orig.DataPoints = UnmarshalJSONOrigExponentialHistogramDataPointSlice(iter)
		case "aggregationTemporality", "aggregation_temporality":
			orig.AggregationTemporality = otlpmetrics.AggregationTemporality(iter.ReadEnumValue(otlpmetrics.AggregationTemporality_value))
		default:
			iter.Skip()
		}
		return true
	})
}
