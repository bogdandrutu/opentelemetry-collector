// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigSample() otlpprofiles.Sample {
	return otlpprofiles.Sample{}
}

func NewOrigPtrSample() *otlpprofiles.Sample {
	return &otlpprofiles.Sample{}
}

func CopyOrigSample(dest, src *otlpprofiles.Sample) {
	dest.LocationsStartIndex = src.LocationsStartIndex
	dest.LocationsLength = src.LocationsLength
	dest.Value = CopyOrigInt64Slice(dest.Value, src.Value)
	dest.AttributeIndices = CopyOrigInt32Slice(dest.AttributeIndices, src.AttributeIndices)
	if srcLinkIndex, ok := src.LinkIndex_.(*otlpprofiles.Sample_LinkIndex); ok {
		destLinkIndex, ok := dest.LinkIndex_.(*otlpprofiles.Sample_LinkIndex)
		if !ok {
			destLinkIndex = &otlpprofiles.Sample_LinkIndex{}
			dest.LinkIndex_ = destLinkIndex
		}
		destLinkIndex.LinkIndex = srcLinkIndex.LinkIndex
	} else {
		dest.LinkIndex_ = nil
	}
	dest.TimestampsUnixNano = CopyOrigUint64Slice(dest.TimestampsUnixNano, src.TimestampsUnixNano)
}

func FillOrigTestSample(orig *otlpprofiles.Sample) {
	orig.LocationsStartIndex = int32(13)
	orig.LocationsLength = int32(13)
	orig.Value = GenerateOrigTestInt64Slice()
	orig.AttributeIndices = GenerateOrigTestInt32Slice()
	orig.LinkIndex_ = &otlpprofiles.Sample_LinkIndex{LinkIndex: int32(13)}
	orig.TimestampsUnixNano = GenerateOrigTestUint64Slice()
}

// UnmarshalJSONOrigSample unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigSample(orig *otlpprofiles.Sample, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "locationsStartIndex", "locations_start_index":
			orig.LocationsStartIndex = iter.ReadInt32()
		case "locationsLength", "locations_length":
			orig.LocationsLength = iter.ReadInt32()
		case "value":
			orig.Value = UnmarshalJSONOrigInt64Slice(iter)
		case "attributeIndices", "attribute_indices":
			orig.AttributeIndices = UnmarshalJSONOrigInt32Slice(iter)
		case "linkIndex", "link_index":
			orig.LinkIndex_ = &otlpprofiles.Sample_LinkIndex{LinkIndex: iter.ReadInt32()}
		case "timestampsUnixNano", "timestamps_unix_nano":
			orig.TimestampsUnixNano = UnmarshalJSONOrigUint64Slice(iter)
		default:
			iter.Skip()
		}
		return true
	})
}
