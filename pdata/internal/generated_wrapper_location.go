// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigLocation() otlpprofiles.Location {
	return otlpprofiles.Location{}
}

func NewOrigPtrLocation() *otlpprofiles.Location {
	return &otlpprofiles.Location{}
}

func CopyOrigLocation(dest, src *otlpprofiles.Location) {
	if srcMappingIndex, ok := src.MappingIndex_.(*otlpprofiles.Location_MappingIndex); ok {
		destMappingIndex, ok := dest.MappingIndex_.(*otlpprofiles.Location_MappingIndex)
		if !ok {
			destMappingIndex = &otlpprofiles.Location_MappingIndex{}
			dest.MappingIndex_ = destMappingIndex
		}
		destMappingIndex.MappingIndex = srcMappingIndex.MappingIndex
	} else {
		dest.MappingIndex_ = nil
	}
	dest.Address = src.Address
	dest.Line = CopyOrigLineSlice(dest.Line, src.Line)
	dest.IsFolded = src.IsFolded
	dest.AttributeIndices = CopyOrigInt32Slice(dest.AttributeIndices, src.AttributeIndices)
}

func FillOrigTestLocation(orig *otlpprofiles.Location) {
	orig.MappingIndex_ = &otlpprofiles.Location_MappingIndex{MappingIndex: int32(13)}
	orig.Address = uint64(13)
	orig.Line = GenerateOrigTestLineSlice()
	orig.IsFolded = true
	orig.AttributeIndices = GenerateOrigTestInt32Slice()
}

// UnmarshalJSONOrigLocation unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigLocation(orig *otlpprofiles.Location, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "mappingIndex", "mapping_index":
			orig.MappingIndex_ = &otlpprofiles.Location_MappingIndex{MappingIndex: iter.ReadInt32()}
		case "address":
			orig.Address = iter.ReadUint64()
		case "line":
			orig.Line = UnmarshalJSONOrigLineSlice(iter)
		case "isFolded", "is_folded":
			orig.IsFolded = iter.ReadBool()
		case "attributeIndices", "attribute_indices":
			orig.AttributeIndices = UnmarshalJSONOrigInt32Slice(iter)
		default:
			iter.Skip()
		}
		return true
	})
}
