// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpmetrics "go.opentelemetry.io/proto/slim/otlp/metrics/v1"
	"google.golang.org/protobuf/proto"

	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"

	"strconv"
)

func TestCopyOrigExponentialHistogramDataPoint(t *testing.T) {
	src := NewOrigPtrExponentialHistogramDataPoint()
	dest := NewOrigPtrExponentialHistogramDataPoint()
	CopyOrigExponentialHistogramDataPoint(dest, src)
	assert.Equal(t, NewOrigPtrExponentialHistogramDataPoint(), dest)
	*src = *GenTestOrigExponentialHistogramDataPoint()
	CopyOrigExponentialHistogramDataPoint(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigExponentialHistogramDataPointUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrExponentialHistogramDataPoint()
	UnmarshalJSONOrigExponentialHistogramDataPoint(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrExponentialHistogramDataPoint(), dest)
}

func TestMarshalAndUnmarshalJSONOrigExponentialHistogramDataPoint(t *testing.T) {
	for i, src := range genTestValuesExponentialHistogramDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigExponentialHistogramDataPoint(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrExponentialHistogramDataPoint()
			UnmarshalJSONOrigExponentialHistogramDataPoint(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigExponentialHistogramDataPointUnknown(t *testing.T) {
	dest := NewOrigPtrExponentialHistogramDataPoint()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigExponentialHistogramDataPoint(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrExponentialHistogramDataPoint(), dest)
}

func TestMarshalAndUnmarshalProtoOrigExponentialHistogramDataPoint(t *testing.T) {
	for i, src := range genTestValuesExponentialHistogramDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigExponentialHistogramDataPoint(src))
			gotSize := MarshalProtoOrigExponentialHistogramDataPoint(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrExponentialHistogramDataPoint()
			require.NoError(t, UnmarshalProtoOrigExponentialHistogramDataPoint(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufExponentialHistogramDataPoint(t *testing.T) {
	for i, src := range genTestValuesExponentialHistogramDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigExponentialHistogramDataPoint(src))
			gotSize := MarshalProtoOrigExponentialHistogramDataPoint(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpmetrics.ExponentialHistogramDataPoint{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrExponentialHistogramDataPoint()
			require.NoError(t, UnmarshalProtoOrigExponentialHistogramDataPoint(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestValuesExponentialHistogramDataPoint() []*otlpmetrics.ExponentialHistogramDataPoint {
	return []*otlpmetrics.ExponentialHistogramDataPoint{
		NewOrigPtrExponentialHistogramDataPoint(),

		{Attributes: []otlpcommon.KeyValue{{}, *GenTestOrigKeyValue()}},
		{StartTimeUnixNano: uint64(13)},
		{TimeUnixNano: uint64(13)},
		{Count: uint64(13)}, {Sum_: &otlpmetrics.ExponentialHistogramDataPoint_Sum{Sum: float64(3.1415926)}},
		{Sum_: &otlpmetrics.ExponentialHistogramDataPoint_Sum{Sum: float64(0)}},
		{Scale: int32(13)},
		{ZeroCount: uint64(13)},
		{Positive: *GenTestOrigExponentialHistogramDataPoint_Buckets()},
		{Negative: *GenTestOrigExponentialHistogramDataPoint_Buckets()},
		{Flags: uint32(13)},
		{Exemplars: []otlpmetrics.Exemplar{{}, *GenTestOrigExemplar()}}, {Min_: &otlpmetrics.ExponentialHistogramDataPoint_Min{Min: float64(3.1415926)}},
		{Min_: &otlpmetrics.ExponentialHistogramDataPoint_Min{Min: float64(0)}}, {Max_: &otlpmetrics.ExponentialHistogramDataPoint_Max{Max: float64(3.1415926)}},
		{Max_: &otlpmetrics.ExponentialHistogramDataPoint_Max{Max: float64(0)}},
		{ZeroThreshold: float64(3.1415926)},
	}
}
