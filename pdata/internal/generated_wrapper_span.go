// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectortrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigSpan() otlptrace.Span {
	return otlptrace.Span{}
}

func NewOrigPtrSpan() *otlptrace.Span {
	return &otlptrace.Span{}
}

func CopyOrigSpan(dest, src *otlptrace.Span) {
	dest.TraceId = src.TraceId
	dest.SpanId = src.SpanId
	CopyOrigTraceState(&dest.TraceState, &src.TraceState)
	dest.ParentSpanId = src.ParentSpanId
	dest.Flags = src.Flags
	dest.Name = src.Name
	dest.Kind = src.Kind
	dest.StartTimeUnixNano = src.StartTimeUnixNano
	dest.EndTimeUnixNano = src.EndTimeUnixNano
	dest.Attributes = CopyOrigKeyValueSlice(dest.Attributes, src.Attributes)
	dest.DroppedAttributesCount = src.DroppedAttributesCount
	dest.Events = CopyOrigSpan_EventSlice(dest.Events, src.Events)
	dest.DroppedEventsCount = src.DroppedEventsCount
	dest.Links = CopyOrigSpan_LinkSlice(dest.Links, src.Links)
	dest.DroppedLinksCount = src.DroppedLinksCount
	CopyOrigStatus(&dest.Status, &src.Status)
}

func FillOrigTestSpan(orig *otlptrace.Span) {
	orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	FillOrigTestTraceState(&orig.TraceState)
	orig.ParentSpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	orig.Flags = uint32(13)
	orig.Name = "test_name"
	orig.Kind = otlptrace.Span_SpanKind(3)
	orig.StartTimeUnixNano = 1234567890
	orig.EndTimeUnixNano = 1234567890
	orig.Attributes = GenerateOrigTestKeyValueSlice()
	orig.DroppedAttributesCount = uint32(13)
	orig.Events = GenerateOrigTestSpan_EventSlice()
	orig.DroppedEventsCount = uint32(13)
	orig.Links = GenerateOrigTestSpan_LinkSlice()
	orig.DroppedLinksCount = uint32(13)
	FillOrigTestStatus(&orig.Status)
}

// UnmarshalJSONOrigSpan unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigSpan(orig *otlptrace.Span, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "traceId", "trace_id":
			orig.TraceId.UnmarshalJSONIter(iter)
		case "spanId", "span_id":
			orig.SpanId.UnmarshalJSONIter(iter)
		case "traceState", "trace_state":
			UnmarshalJSONOrigTraceState(&orig.TraceState, iter)
		case "parentSpanId", "parent_span_id":
			orig.ParentSpanId.UnmarshalJSONIter(iter)
		case "flags":
			orig.Flags = iter.ReadUint32()
		case "name":
			orig.Name = iter.ReadString()
		case "kind":
			orig.Kind = otlptrace.Span_SpanKind(iter.ReadEnumValue(otlptrace.Span_SpanKind_value))
		case "startTimeUnixNano", "start_time_unix_nano":
			orig.StartTimeUnixNano = iter.ReadUint64()
		case "endTimeUnixNano", "end_time_unix_nano":
			orig.EndTimeUnixNano = iter.ReadUint64()
		case "attributes":
			orig.Attributes = UnmarshalJSONOrigKeyValueSlice(iter)
		case "droppedAttributesCount", "dropped_attributes_count":
			orig.DroppedAttributesCount = iter.ReadUint32()
		case "events":
			orig.Events = UnmarshalJSONOrigSpan_EventSlice(iter)
		case "droppedEventsCount", "dropped_events_count":
			orig.DroppedEventsCount = iter.ReadUint32()
		case "links":
			orig.Links = UnmarshalJSONOrigSpan_LinkSlice(iter)
		case "droppedLinksCount", "dropped_links_count":
			orig.DroppedLinksCount = iter.ReadUint32()
		case "status":
			UnmarshalJSONOrigStatus(&orig.Status, iter)
		default:
			iter.Skip()
		}
		return true
	})
}
