// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectormetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigResourceMetrics() otlpmetrics.ResourceMetrics {
	return otlpmetrics.ResourceMetrics{}
}

func NewOrigPtrResourceMetrics() *otlpmetrics.ResourceMetrics {
	return &otlpmetrics.ResourceMetrics{}
}

func CopyOrigResourceMetrics(dest, src *otlpmetrics.ResourceMetrics) {
	CopyOrigResource(&dest.Resource, &src.Resource)
	dest.ScopeMetrics = CopyOrigScopeMetricsSlice(dest.ScopeMetrics, src.ScopeMetrics)
	dest.SchemaUrl = src.SchemaUrl
}

func FillOrigTestResourceMetrics(orig *otlpmetrics.ResourceMetrics) {
	FillOrigTestResource(&orig.Resource)
	orig.ScopeMetrics = GenerateOrigTestScopeMetricsSlice()
	orig.SchemaUrl = "test_schemaurl"
}

// UnmarshalJSONOrigResourceMetrics unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigResourceMetrics(orig *otlpmetrics.ResourceMetrics, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "resource":
			UnmarshalJSONOrigResource(&orig.Resource, iter)
		case "scopeMetrics", "scope_metrics":
			orig.ScopeMetrics = UnmarshalJSONOrigScopeMetricsSlice(iter)
		case "schemaUrl", "schema_url":
			orig.SchemaUrl = iter.ReadString()
		default:
			iter.Skip()
		}
		return true
	})
}
