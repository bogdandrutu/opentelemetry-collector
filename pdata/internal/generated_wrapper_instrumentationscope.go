// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"
	
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpresource "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
	
)


type InstrumentationScope struct {
	orig *otlpcommon.InstrumentationScope
	state *State
}

func GetOrigInstrumentationScope(ms InstrumentationScope) *otlpcommon.InstrumentationScope {
	return ms.orig
}

func GetInstrumentationScopeState(ms InstrumentationScope) *State {
	return ms.state
}

func NewInstrumentationScope(orig *otlpcommon.InstrumentationScope, state *State) InstrumentationScope {
	return InstrumentationScope{orig: orig, state: state}
}

func GenerateTestInstrumentationScope() InstrumentationScope {
	orig := NewOrigPtrInstrumentationScope()
	FillOrigTestInstrumentationScope(orig)
	return NewInstrumentationScope(orig, NewState())
}



func NewOrigInstrumentationScope() otlpcommon.InstrumentationScope {
	return otlpcommon.InstrumentationScope{}
}

func NewOrigPtrInstrumentationScope() *otlpcommon.InstrumentationScope {
    return &otlpcommon.InstrumentationScope{}
}

func CopyOrigInstrumentationScope(dest, src *otlpcommon.InstrumentationScope) {
	dest.Name = src.Name
	dest.Version = src.Version
	dest.Attributes = CopyOrigKeyValueSlice(dest.Attributes, src.Attributes)
	dest.DroppedAttributesCount = src.DroppedAttributesCount
}

func FillOrigTestInstrumentationScope(orig *otlpcommon.InstrumentationScope) {
	orig.Name = "test_name"
	orig.Version = "test_version"
	orig.Attributes = GenerateOrigTestKeyValueSlice()
	orig.DroppedAttributesCount = uint32(13)
}

// UnmarshalJSONOrigInstrumentationScope unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigInstrumentationScope(orig *otlpcommon.InstrumentationScope, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "name":
		orig.Name = iter.ReadString()
		case "version":
		orig.Version = iter.ReadString()
		case "attributes":
	orig.Attributes = UnmarshalJSONOrigKeyValueSlice(iter)
		case "droppedAttributesCount", "dropped_attributes_count":
		orig.DroppedAttributesCount = iter.ReadUint32()
		default:
			iter.Skip()
		}
		return true
	})
}
