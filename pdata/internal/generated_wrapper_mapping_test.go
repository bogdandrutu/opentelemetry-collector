// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpprofiles "go.opentelemetry.io/proto/slim/otlp/profiles/v1development"
	"google.golang.org/protobuf/proto"

	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"

	"strconv"
)

func TestCopyOrigMapping(t *testing.T) {
	src := NewOrigPtrMapping()
	dest := NewOrigPtrMapping()
	CopyOrigMapping(dest, src)
	assert.Equal(t, NewOrigPtrMapping(), dest)
	*src = *GenTestOrigMapping()
	CopyOrigMapping(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigMappingUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrMapping()
	UnmarshalJSONOrigMapping(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrMapping(), dest)
}

func TestMarshalAndUnmarshalJSONOrigMapping(t *testing.T) {
	for i, src := range genTestValuesMapping() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigMapping(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrMapping()
			UnmarshalJSONOrigMapping(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigMappingUnknown(t *testing.T) {
	dest := NewOrigPtrMapping()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigMapping(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrMapping(), dest)
}

func TestMarshalAndUnmarshalProtoOrigMapping(t *testing.T) {
	for i, src := range genTestValuesMapping() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigMapping(src))
			gotSize := MarshalProtoOrigMapping(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrMapping()
			require.NoError(t, UnmarshalProtoOrigMapping(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufMapping(t *testing.T) {
	for i, src := range genTestValuesMapping() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigMapping(src))
			gotSize := MarshalProtoOrigMapping(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpprofiles.Mapping{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrMapping()
			require.NoError(t, UnmarshalProtoOrigMapping(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestValuesMapping() []*otlpprofiles.Mapping {
	return []*otlpprofiles.Mapping{
		NewOrigPtrMapping(),

		{MemoryStart: uint64(13)},
		{MemoryLimit: uint64(13)},
		{FileOffset: uint64(13)},
		{FilenameStrindex: int32(13)},
		{AttributeIndices: []int32{int32(0), int32(13)}},
		{HasFunctions: true},
		{HasFilenames: true},
		{HasLineNumbers: true},
		{HasInlineFrames: true},
	}
}
