// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigMapping() otlpprofiles.Mapping {
	return otlpprofiles.Mapping{}
}

func NewOrigPtrMapping() *otlpprofiles.Mapping {
	return &otlpprofiles.Mapping{}
}

func CopyOrigMapping(dest, src *otlpprofiles.Mapping) {
	dest.MemoryStart = src.MemoryStart
	dest.MemoryLimit = src.MemoryLimit
	dest.FileOffset = src.FileOffset
	dest.FilenameStrindex = src.FilenameStrindex
	dest.AttributeIndices = CopyOrigInt32Slice(dest.AttributeIndices, src.AttributeIndices)
	dest.HasFunctions = src.HasFunctions
	dest.HasFilenames = src.HasFilenames
	dest.HasLineNumbers = src.HasLineNumbers
	dest.HasInlineFrames = src.HasInlineFrames
}

func FillOrigTestMapping(orig *otlpprofiles.Mapping) {
	orig.MemoryStart = uint64(13)
	orig.MemoryLimit = uint64(13)
	orig.FileOffset = uint64(13)
	orig.FilenameStrindex = int32(13)
	orig.AttributeIndices = GenerateOrigTestInt32Slice()
	orig.HasFunctions = true
	orig.HasFilenames = true
	orig.HasLineNumbers = true
	orig.HasInlineFrames = true
}

// UnmarshalJSONOrigMapping unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigMapping(orig *otlpprofiles.Mapping, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "memoryStart", "memory_start":
			orig.MemoryStart = iter.ReadUint64()
		case "memoryLimit", "memory_limit":
			orig.MemoryLimit = iter.ReadUint64()
		case "fileOffset", "file_offset":
			orig.FileOffset = iter.ReadUint64()
		case "filenameStrindex", "filename_strindex":
			orig.FilenameStrindex = iter.ReadInt32()
		case "attributeIndices", "attribute_indices":
			orig.AttributeIndices = UnmarshalJSONOrigInt32Slice(iter)
		case "hasFunctions", "has_functions":
			orig.HasFunctions = iter.ReadBool()
		case "hasFilenames", "has_filenames":
			orig.HasFilenames = iter.ReadBool()
		case "hasLineNumbers", "has_line_numbers":
			orig.HasLineNumbers = iter.ReadBool()
		case "hasInlineFrames", "has_inline_frames":
			orig.HasInlineFrames = iter.ReadBool()
		default:
			iter.Skip()
		}
		return true
	})
}
