// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigFunction() otlpprofiles.Function {
	return otlpprofiles.Function{}
}

func NewOrigPtrFunction() *otlpprofiles.Function {
	return &otlpprofiles.Function{}
}

func CopyOrigFunction(dest, src *otlpprofiles.Function) {
	dest.NameStrindex = src.NameStrindex
	dest.SystemNameStrindex = src.SystemNameStrindex
	dest.FilenameStrindex = src.FilenameStrindex
	dest.StartLine = src.StartLine
}

func FillOrigTestFunction(orig *otlpprofiles.Function) {
	orig.NameStrindex = int32(13)
	orig.SystemNameStrindex = int32(13)
	orig.FilenameStrindex = int32(13)
	orig.StartLine = int64(13)
}

// UnmarshalJSONOrigFunction unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigFunction(orig *otlpprofiles.Function, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "nameStrindex", "name_strindex":
			orig.NameStrindex = iter.ReadInt32()
		case "systemNameStrindex", "system_name_strindex":
			orig.SystemNameStrindex = iter.ReadInt32()
		case "filenameStrindex", "filename_strindex":
			orig.FilenameStrindex = iter.ReadInt32()
		case "startLine", "start_line":
			orig.StartLine = iter.ReadInt64()
		default:
			iter.Skip()
		}
		return true
	})
}
