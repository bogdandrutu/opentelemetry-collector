// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development"
	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpprofiles "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigValueType() otlpprofiles.ValueType {
	return otlpprofiles.ValueType{}
}

func NewOrigPtrValueType() *otlpprofiles.ValueType {
	return &otlpprofiles.ValueType{}
}

func CopyOrigValueType(dest, src *otlpprofiles.ValueType) {
	dest.TypeStrindex = src.TypeStrindex
	dest.UnitStrindex = src.UnitStrindex
	dest.AggregationTemporality = src.AggregationTemporality
}

func FillOrigTestValueType(orig *otlpprofiles.ValueType) {
	orig.TypeStrindex = int32(13)
	orig.UnitStrindex = int32(13)
	orig.AggregationTemporality = otlpprofiles.AggregationTemporality(1)
}

// UnmarshalJSONOrigValueType unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigValueType(orig *otlpprofiles.ValueType, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "typeStrindex", "type_strindex":
			orig.TypeStrindex = iter.ReadInt32()
		case "unitStrindex", "unit_strindex":
			orig.UnitStrindex = iter.ReadInt32()
		case "aggregationTemporality", "aggregation_temporality":
			orig.AggregationTemporality = otlpprofiles.AggregationTemporality(iter.ReadEnumValue(otlpprofiles.AggregationTemporality_value))
		default:
			iter.Skip()
		}
		return true
	})
}
