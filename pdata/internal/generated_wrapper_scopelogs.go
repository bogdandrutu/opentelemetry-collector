// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigScopeLogs() otlplogs.ScopeLogs {
	return otlplogs.ScopeLogs{}
}

func NewOrigPtrScopeLogs() *otlplogs.ScopeLogs {
	return &otlplogs.ScopeLogs{}
}

func CopyOrigScopeLogs(dest, src *otlplogs.ScopeLogs) {
	CopyOrigInstrumentationScope(&dest.Scope, &src.Scope)
	dest.LogRecords = CopyOrigLogRecordSlice(dest.LogRecords, src.LogRecords)
	dest.SchemaUrl = src.SchemaUrl
}

func FillOrigTestScopeLogs(orig *otlplogs.ScopeLogs) {
	FillOrigTestInstrumentationScope(&orig.Scope)
	orig.LogRecords = GenerateOrigTestLogRecordSlice()
	orig.SchemaUrl = "test_schemaurl"
}

// UnmarshalJSONOrigScopeLogs unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigScopeLogs(orig *otlplogs.ScopeLogs, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "scope":
			UnmarshalJSONOrigInstrumentationScope(&orig.Scope, iter)
		case "logRecords", "log_records":
			orig.LogRecords = UnmarshalJSONOrigLogRecordSlice(iter)
		case "schemaUrl", "schema_url":
			orig.SchemaUrl = iter.ReadString()
		default:
			iter.Skip()
		}
		return true
	})
}
