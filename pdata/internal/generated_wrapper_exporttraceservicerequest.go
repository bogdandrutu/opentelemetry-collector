// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectortrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/trace/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

type Traces struct {
	orig  *otlpcollectortrace.ExportTraceServiceRequest
	state *State
}

func GetOrigTraces(ms Traces) *otlpcollectortrace.ExportTraceServiceRequest {
	return ms.orig
}

func GetTracesState(ms Traces) *State {
	return ms.state
}

func NewTraces(orig *otlpcollectortrace.ExportTraceServiceRequest, state *State) Traces {
	return Traces{orig: orig, state: state}
}

func GenerateTestTraces() Traces {
	orig := NewOrigPtrExportTraceServiceRequest()
	FillOrigTestExportTraceServiceRequest(orig)
	return NewTraces(orig, NewState())
}

func NewOrigExportTraceServiceRequest() otlpcollectortrace.ExportTraceServiceRequest {
	return otlpcollectortrace.ExportTraceServiceRequest{}
}

func NewOrigPtrExportTraceServiceRequest() *otlpcollectortrace.ExportTraceServiceRequest {
	return &otlpcollectortrace.ExportTraceServiceRequest{}
}

func CopyOrigExportTraceServiceRequest(dest, src *otlpcollectortrace.ExportTraceServiceRequest) {
	dest.ResourceSpans = CopyOrigResourceSpansSlice(dest.ResourceSpans, src.ResourceSpans)
}

func FillOrigTestExportTraceServiceRequest(orig *otlpcollectortrace.ExportTraceServiceRequest) {
	orig.ResourceSpans = GenerateOrigTestResourceSpansSlice()
}

// UnmarshalJSONOrigTraces unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigExportTraceServiceRequest(orig *otlpcollectortrace.ExportTraceServiceRequest, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "resourceSpans", "resource_spans":
			orig.ResourceSpans = UnmarshalJSONOrigResourceSpansSlice(iter)
		default:
			iter.Skip()
		}
		return true
	})
}
