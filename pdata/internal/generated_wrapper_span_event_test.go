// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlptrace "go.opentelemetry.io/proto/slim/otlp/trace/v1"
	"google.golang.org/protobuf/proto"

	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlptrace "go.opentelemetry.io/collector/pdata/internal/data/protogen/trace/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"

	"strconv"
)

func TestCopyOrigSpan_Event(t *testing.T) {
	src := NewOrigPtrSpan_Event()
	dest := NewOrigPtrSpan_Event()
	CopyOrigSpan_Event(dest, src)
	assert.Equal(t, NewOrigPtrSpan_Event(), dest)
	*src = *GenTestOrigSpan_Event()
	CopyOrigSpan_Event(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigSpan_EventUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrSpan_Event()
	UnmarshalJSONOrigSpan_Event(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrSpan_Event(), dest)
}

func TestMarshalAndUnmarshalJSONOrigSpan_Event(t *testing.T) {
	for i, src := range genTestValuesSpan_Event() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigSpan_Event(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrSpan_Event()
			UnmarshalJSONOrigSpan_Event(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigSpan_EventUnknown(t *testing.T) {
	dest := NewOrigPtrSpan_Event()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigSpan_Event(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrSpan_Event(), dest)
}

func TestMarshalAndUnmarshalProtoOrigSpan_Event(t *testing.T) {
	for i, src := range genTestValuesSpan_Event() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigSpan_Event(src))
			gotSize := MarshalProtoOrigSpan_Event(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrSpan_Event()
			require.NoError(t, UnmarshalProtoOrigSpan_Event(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufSpan_Event(t *testing.T) {
	for i, src := range genTestValuesSpan_Event() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigSpan_Event(src))
			gotSize := MarshalProtoOrigSpan_Event(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlptrace.Span_Event{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrSpan_Event()
			require.NoError(t, UnmarshalProtoOrigSpan_Event(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestValuesSpan_Event() []*otlptrace.Span_Event {
	return []*otlptrace.Span_Event{
		NewOrigPtrSpan_Event(),

		{TimeUnixNano: uint64(13)},
		{Name: "test_name"},
		{Attributes: []otlpcommon.KeyValue{{}, *GenTestOrigKeyValue()}},
		{DroppedAttributesCount: uint32(13)},
	}
}
