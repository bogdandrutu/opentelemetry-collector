// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigLogRecord() otlplogs.LogRecord {
	return otlplogs.LogRecord{}
}

func NewOrigPtrLogRecord() *otlplogs.LogRecord {
	return &otlplogs.LogRecord{}
}

func CopyOrigLogRecord(dest, src *otlplogs.LogRecord) {
	dest.TimeUnixNano = src.TimeUnixNano
	dest.ObservedTimeUnixNano = src.ObservedTimeUnixNano
	dest.SeverityNumber = src.SeverityNumber
	dest.SeverityText = src.SeverityText
	CopyOrigAnyValue(&dest.Body, &src.Body)
	dest.Attributes = CopyOrigKeyValueSlice(dest.Attributes, src.Attributes)
	dest.DroppedAttributesCount = src.DroppedAttributesCount
	dest.Flags = src.Flags
	dest.TraceId = src.TraceId
	dest.SpanId = src.SpanId
	dest.EventName = src.EventName
}

func FillOrigTestLogRecord(orig *otlplogs.LogRecord) {
	orig.TimeUnixNano = 1234567890
	orig.ObservedTimeUnixNano = 1234567890
	orig.SeverityNumber = otlplogs.SeverityNumber(5)
	orig.SeverityText = "test_severitytext"
	FillOrigTestAnyValue(&orig.Body)
	orig.Attributes = GenerateOrigTestKeyValueSlice()
	orig.DroppedAttributesCount = uint32(13)
	orig.Flags = 1
	orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
	orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	orig.EventName = "test_eventname"
}

// UnmarshalJSONOrigLogRecord unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigLogRecord(orig *otlplogs.LogRecord, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "timeUnixNano", "time_unix_nano":
			orig.TimeUnixNano = iter.ReadUint64()
		case "observedTimeUnixNano", "observed_time_unix_nano":
			orig.ObservedTimeUnixNano = iter.ReadUint64()
		case "severityNumber", "severity_number":
			orig.SeverityNumber = otlplogs.SeverityNumber(iter.ReadEnumValue(otlplogs.SeverityNumber_value))
		case "severityText", "severity_text":
			orig.SeverityText = iter.ReadString()
		case "body":
			UnmarshalJSONOrigAnyValue(&orig.Body, iter)
		case "attributes":
			orig.Attributes = UnmarshalJSONOrigKeyValueSlice(iter)
		case "droppedAttributesCount", "dropped_attributes_count":
			orig.DroppedAttributesCount = iter.ReadUint32()
		case "flags":
			orig.Flags = iter.ReadUint32()
		case "traceId", "trace_id":
			orig.TraceId.UnmarshalJSONIter(iter)
		case "spanId", "span_id":
			orig.SpanId.UnmarshalJSONIter(iter)
		case "eventName", "event_name":
			orig.EventName = iter.ReadString()
		default:
			iter.Skip()
		}
		return true
	})
}
