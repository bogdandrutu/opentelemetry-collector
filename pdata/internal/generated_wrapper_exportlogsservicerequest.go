// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectorlogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/logs/v1"
	otlplogs "go.opentelemetry.io/collector/pdata/internal/data/protogen/logs/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

type Logs struct {
	orig  *otlpcollectorlogs.ExportLogsServiceRequest
	state *State
}

func GetOrigLogs(ms Logs) *otlpcollectorlogs.ExportLogsServiceRequest {
	return ms.orig
}

func GetLogsState(ms Logs) *State {
	return ms.state
}

func NewLogs(orig *otlpcollectorlogs.ExportLogsServiceRequest, state *State) Logs {
	return Logs{orig: orig, state: state}
}

func GenerateTestLogs() Logs {
	orig := NewOrigPtrExportLogsServiceRequest()
	FillOrigTestExportLogsServiceRequest(orig)
	return NewLogs(orig, NewState())
}

func NewOrigExportLogsServiceRequest() otlpcollectorlogs.ExportLogsServiceRequest {
	return otlpcollectorlogs.ExportLogsServiceRequest{}
}

func NewOrigPtrExportLogsServiceRequest() *otlpcollectorlogs.ExportLogsServiceRequest {
	return &otlpcollectorlogs.ExportLogsServiceRequest{}
}

func CopyOrigExportLogsServiceRequest(dest, src *otlpcollectorlogs.ExportLogsServiceRequest) {
	dest.ResourceLogs = CopyOrigResourceLogsSlice(dest.ResourceLogs, src.ResourceLogs)
}

func FillOrigTestExportLogsServiceRequest(orig *otlpcollectorlogs.ExportLogsServiceRequest) {
	orig.ResourceLogs = GenerateOrigTestResourceLogsSlice()
}

// UnmarshalJSONOrigLogs unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigExportLogsServiceRequest(orig *otlpcollectorlogs.ExportLogsServiceRequest, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "resourceLogs", "resource_logs":
			orig.ResourceLogs = UnmarshalJSONOrigResourceLogsSlice(iter)
		default:
			iter.Skip()
		}
		return true
	})
}
