// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	gootlpmetrics "go.opentelemetry.io/proto/slim/otlp/metrics/v1"
	"google.golang.org/protobuf/proto"

	otlpcommon "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"

	"strconv"
)

func TestCopyOrigSummaryDataPoint(t *testing.T) {
	src := NewOrigPtrSummaryDataPoint()
	dest := NewOrigPtrSummaryDataPoint()
	CopyOrigSummaryDataPoint(dest, src)
	assert.Equal(t, NewOrigPtrSummaryDataPoint(), dest)
	*src = *GenTestOrigSummaryDataPoint()
	CopyOrigSummaryDataPoint(dest, src)
	assert.Equal(t, src, dest)
}

func TestMarshalAndUnmarshalJSONOrigSummaryDataPointUnknown(t *testing.T) {
	iter := json.BorrowIterator([]byte(`{"unknown": "string"}`))
	defer json.ReturnIterator(iter)
	dest := NewOrigPtrSummaryDataPoint()
	UnmarshalJSONOrigSummaryDataPoint(dest, iter)
	require.NoError(t, iter.Error())
	assert.Equal(t, NewOrigPtrSummaryDataPoint(), dest)
}

func TestMarshalAndUnmarshalJSONOrigSummaryDataPoint(t *testing.T) {
	for i, src := range genTestValuesSummaryDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			stream := json.BorrowStream(nil)
			defer json.ReturnStream(stream)
			MarshalJSONOrigSummaryDataPoint(src, stream)
			require.NoError(t, stream.Error())

			iter := json.BorrowIterator(stream.Buffer())
			defer json.ReturnIterator(iter)
			dest := NewOrigPtrSummaryDataPoint()
			UnmarshalJSONOrigSummaryDataPoint(dest, iter)
			require.NoError(t, iter.Error())

			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoOrigSummaryDataPointUnknown(t *testing.T) {
	dest := NewOrigPtrSummaryDataPoint()
	// message Test { required int64 field = 1313; } encoding { "field": "1234" }
	require.NoError(t, UnmarshalProtoOrigSummaryDataPoint(dest, []byte{0x88, 0x52, 0xD2, 0x09}))
	assert.Equal(t, NewOrigPtrSummaryDataPoint(), dest)
}

func TestMarshalAndUnmarshalProtoOrigSummaryDataPoint(t *testing.T) {
	for i, src := range genTestValuesSummaryDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigSummaryDataPoint(src))
			gotSize := MarshalProtoOrigSummaryDataPoint(src, buf)
			assert.Equal(t, len(buf), gotSize)

			dest := NewOrigPtrSummaryDataPoint()
			require.NoError(t, UnmarshalProtoOrigSummaryDataPoint(dest, buf))
			assert.Equal(t, src, dest)
		})
	}
}

func TestMarshalAndUnmarshalProtoViaProtobufSummaryDataPoint(t *testing.T) {
	for i, src := range genTestValuesSummaryDataPoint() {
		t.Run("value_"+strconv.Itoa(i), func(t *testing.T) {
			buf := make([]byte, SizeProtoOrigSummaryDataPoint(src))
			gotSize := MarshalProtoOrigSummaryDataPoint(src, buf)
			assert.Equal(t, len(buf), gotSize)

			goDest := &gootlpmetrics.SummaryDataPoint{}
			require.NoError(t, proto.Unmarshal(buf, goDest))

			goBuf, err := proto.Marshal(goDest)
			require.NoError(t, err)

			dest := NewOrigPtrSummaryDataPoint()
			require.NoError(t, UnmarshalProtoOrigSummaryDataPoint(dest, goBuf))
			assert.Equal(t, src, dest)
		})
	}
}

func genTestValuesSummaryDataPoint() []*otlpmetrics.SummaryDataPoint {
	return []*otlpmetrics.SummaryDataPoint{
		NewOrigPtrSummaryDataPoint(),

		{Attributes: []otlpcommon.KeyValue{{}, *GenTestOrigKeyValue()}},
		{StartTimeUnixNano: uint64(13)},
		{TimeUnixNano: uint64(13)},
		{Count: uint64(13)},
		{Sum: float64(3.1415926)},
		{QuantileValues: []*otlpmetrics.SummaryDataPoint_ValueAtQuantile{{}, GenTestOrigSummaryDataPoint_ValueAtQuantile()}},
		{Flags: uint32(13)},
	}
}
