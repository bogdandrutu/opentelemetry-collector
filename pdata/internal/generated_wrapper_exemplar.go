// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package internal

import (
	"encoding/binary"
	"fmt"
	"iter"
	"math"
	"sort"
	"sync"

	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpcollectormetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/metrics/v1"
	otlpmetrics "go.opentelemetry.io/collector/pdata/internal/data/protogen/metrics/v1"
	"go.opentelemetry.io/collector/pdata/internal/json"
	"go.opentelemetry.io/collector/pdata/internal/proto"
)

func NewOrigExemplar() otlpmetrics.Exemplar {
	return otlpmetrics.Exemplar{}
}

func NewOrigPtrExemplar() *otlpmetrics.Exemplar {
	return &otlpmetrics.Exemplar{}
}

func CopyOrigExemplar(dest, src *otlpmetrics.Exemplar) {
	dest.FilteredAttributes = CopyOrigKeyValueSlice(dest.FilteredAttributes, src.FilteredAttributes)
	dest.TimeUnixNano = src.TimeUnixNano
	switch t := src.Value.(type) {
	case *otlpmetrics.Exemplar_AsDouble:
		dest.Value = &otlpmetrics.Exemplar_AsDouble{AsDouble: t.AsDouble}
	case *otlpmetrics.Exemplar_AsInt:
		dest.Value = &otlpmetrics.Exemplar_AsInt{AsInt: t.AsInt}
	}
	dest.SpanId = src.SpanId
	dest.TraceId = src.TraceId
}

func FillOrigTestExemplar(orig *otlpmetrics.Exemplar) {
	orig.FilteredAttributes = GenerateOrigTestKeyValueSlice()
	orig.TimeUnixNano = 1234567890
	orig.Value = &otlpmetrics.Exemplar_AsInt{AsInt: int64(13)}
	orig.SpanId = data.SpanID([8]byte{8, 7, 6, 5, 4, 3, 2, 1})
	orig.TraceId = data.TraceID([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1})
}

// UnmarshalJSONOrigExemplar unmarshals all properties from the current struct from the source iterator.
func UnmarshalJSONOrigExemplar(orig *otlpmetrics.Exemplar, iter *json.Iterator) {
	iter.ReadObjectCB(func(iter *json.Iterator, f string) bool {
		switch f {
		case "filteredAttributes", "filtered_attributes":
			orig.FilteredAttributes = UnmarshalJSONOrigKeyValueSlice(iter)
		case "timeUnixNano", "time_unix_nano":
			orig.TimeUnixNano = iter.ReadUint64()

		case "asDouble", "as_double":
			orig.Value = &otlpmetrics.Exemplar_AsDouble{
				AsDouble: iter.ReadFloat64(),
			}
		case "asInt", "as_int":
			orig.Value = &otlpmetrics.Exemplar_AsInt{
				AsInt: iter.ReadInt64(),
			}
		case "spanId", "span_id":
			orig.SpanId.UnmarshalJSONIter(iter)
		case "traceId", "trace_id":
			orig.TraceId.UnmarshalJSONIter(iter)
		default:
			iter.Skip()
		}
		return true
	})
}
